{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/\\u0420\\u0430\\u0431\\u043E\\u0442\\u0430/React/Projects/Currency-Converter-app/src/ui/pages/Converter/Converter.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styles from './Converter.module.scss';\nimport Input from \"../../../common/components/Input/Input\";\nimport Select from \"../../../common/components/Select/Select\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setInputChangeFromValue, setInputChangeToValue, setSelectCurrencyFromValue, setSelectCurrencyToValue } from \"../../../store/converterReducer\";\nimport { resetInputs } from \"../../../common/helper/helper\";\nimport { getCurrencyApi } from \"../../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Converter = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n\n  const currencyExchangeRates = useSelector(state => state.converterReducer.data);\n  const baseCurrency = useSelector(state => state.converterReducer.query.base_currency);\n  const {\n    inputChangeFromValue,\n    inputChangeToValue,\n    selectCurrencyFromValue,\n    selectCurrencyToValue\n  } = useSelector(state => state.converterReducer);\n  const dispatch = useDispatch();\n  const currenciesApi = Object.keys(currencyExchangeRates);\n  const selectCurrencyFromValues = [baseCurrency, ...currenciesApi];\n  const selectCurrencyToValues = ['', ...currenciesApi];\n  const exchangeRateSelectedCurrencies = currencyExchangeRates[selectCurrencyToValue];\n\n  const onChangeInputChangeFromValue = e => {\n    const currentValue = e.currentTarget.value;\n    if (Number(currentValue) < 0) return;\n    dispatch(setInputChangeFromValue(currentValue));\n    const calculatedInputChangeToValue = Math.round(Number(Number(currentValue) * exchangeRateSelectedCurrencies) * 100) / 100;\n    dispatch(setInputChangeToValue(calculatedInputChangeToValue.toString()));\n  };\n\n  const onChangeInputChangeToValue = e => {\n    const currentValue = e.currentTarget.value;\n    if (Number(currentValue) < 0) return;\n    dispatch(setInputChangeToValue(currentValue));\n    const calculatedInputChangeFromValue = Math.round(Number(Number(currentValue) / exchangeRateSelectedCurrencies) * 100) / 100;\n    dispatch(setInputChangeFromValue(calculatedInputChangeFromValue.toString()));\n  };\n\n  const onChangeSelectCurrencyFrom = e => {\n    const currentValue = e.currentTarget.value;\n    dispatch(setSelectCurrencyFromValue(currentValue));\n    dispatch(getCurrencyApi(currentValue));\n    resetInputs(dispatch);\n  };\n\n  const onChangeSelectCurrencyTo = e => {\n    const currentValue = e.currentTarget.value;\n    dispatch(setSelectCurrencyToValue(currentValue));\n    resetInputs(dispatch);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.converter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Currency Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select currency to exchange from:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: 'number',\n        value: inputChangeFromValue,\n        onChange: onChangeInputChangeFromValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: selectCurrencyFromValues,\n        value: selectCurrencyFromValue,\n        onChange: onChangeSelectCurrencyFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select currency to exchange to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: 'number',\n        value: inputChangeToValue,\n        onChange: onChangeInputChangeToValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: selectCurrencyToValues,\n        value: selectCurrencyToValue,\n        onChange: onChangeSelectCurrencyTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}, \"0VcIIut7of4oBOPv3JWm4IXp3mk=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n})), \"0VcIIut7of4oBOPv3JWm4IXp3mk=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c2 = Converter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Converter$React.memo\");\n$RefreshReg$(_c2, \"Converter\");","map":{"version":3,"sources":["/Users/macbook/Documents/Работа/React/Projects/Currency-Converter-app/src/ui/pages/Converter/Converter.tsx"],"names":["React","styles","Input","Select","useDispatch","useSelector","setInputChangeFromValue","setInputChangeToValue","setSelectCurrencyFromValue","setSelectCurrencyToValue","resetInputs","getCurrencyApi","Converter","memo","currencyExchangeRates","state","converterReducer","data","baseCurrency","query","base_currency","inputChangeFromValue","inputChangeToValue","selectCurrencyFromValue","selectCurrencyToValue","dispatch","currenciesApi","Object","keys","selectCurrencyFromValues","selectCurrencyToValues","exchangeRateSelectedCurrencies","onChangeInputChangeFromValue","e","currentValue","currentTarget","value","Number","calculatedInputChangeToValue","Math","round","toString","onChangeInputChangeToValue","calculatedInputChangeFromValue","onChangeSelectCurrencyFrom","onChangeSelectCurrencyTo","converter"],"mappings":"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","sourcesContent":["import React, {ChangeEvent} from \"react\";\nimport styles from './Converter.module.scss'\nimport Input from \"../../../common/components/Input/Input\";\nimport Select from \"../../../common/components/Select/Select\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../store/store\";\nimport {\n  ConverterInitialStateType, CurrencyExchangeRatesType, setInputChangeFromValue,\n  setInputChangeToValue, setSelectCurrencyFromValue, setSelectCurrencyToValue\n} from \"../../../store/converterReducer\";\nimport {resetInputs} from \"../../../common/helper/helper\";\nimport {getCurrencyApi} from \"../../../store/thunks\";\n\n\nexport const Converter = React.memo(() => {\n  const currencyExchangeRates = useSelector<AppStoreType, CurrencyExchangeRatesType>(state => state.converterReducer.data)\n  const baseCurrency = useSelector<AppStoreType, string>(state => state.converterReducer.query.base_currency)\n  const {\n    inputChangeFromValue,\n    inputChangeToValue,\n    selectCurrencyFromValue,\n    selectCurrencyToValue,\n  } = useSelector<AppStoreType, ConverterInitialStateType>(state => state.converterReducer)\n  const dispatch = useDispatch()\n\n  const currenciesApi = Object.keys(currencyExchangeRates)\n  const selectCurrencyFromValues = [baseCurrency, ...currenciesApi]\n  const selectCurrencyToValues = ['', ...currenciesApi]\n  const exchangeRateSelectedCurrencies = currencyExchangeRates[selectCurrencyToValue]\n\n  const onChangeInputChangeFromValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const currentValue = e.currentTarget.value\n    if (Number(currentValue) < 0) return\n    dispatch(setInputChangeFromValue(currentValue))\n    const calculatedInputChangeToValue = (Math.round(Number(Number(currentValue) * exchangeRateSelectedCurrencies) * 100) / 100)\n    dispatch(setInputChangeToValue(calculatedInputChangeToValue.toString()))\n  }\n  const onChangeInputChangeToValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const currentValue = e.currentTarget.value\n    if (Number(currentValue) < 0) return\n    dispatch(setInputChangeToValue(currentValue))\n    const calculatedInputChangeFromValue = (Math.round(Number(Number(currentValue) / exchangeRateSelectedCurrencies) * 100) / 100)\n    dispatch(setInputChangeFromValue(calculatedInputChangeFromValue.toString()))\n  }\n  const onChangeSelectCurrencyFrom = (e: ChangeEvent<HTMLSelectElement>) => {\n    const currentValue = e.currentTarget.value\n    dispatch(setSelectCurrencyFromValue(currentValue))\n    dispatch(getCurrencyApi(currentValue))\n    resetInputs(dispatch)\n  }\n  const onChangeSelectCurrencyTo = (e: ChangeEvent<HTMLSelectElement>) => {\n    const currentValue = e.currentTarget.value\n    dispatch(setSelectCurrencyToValue(currentValue))\n    resetInputs(dispatch)\n  }\n\n  return (\n    <div className={styles.converter}>\n      <h1>Currency Converter</h1>\n      <div>\n        <h4>Select currency to exchange from:</h4>\n        <Input\n          type={'number'}\n          value={inputChangeFromValue}\n          onChange={onChangeInputChangeFromValue}\n        />\n        <Select\n          options={selectCurrencyFromValues}\n          value={selectCurrencyFromValue}\n          onChange={onChangeSelectCurrencyFrom}\n        />\n      </div>\n\n      <div>\n        <h4>Select currency to exchange to:</h4>\n        <Input\n          type={'number'}\n          value={inputChangeToValue}\n          onChange={onChangeInputChangeToValue}\n        />\n        <Select\n          options={selectCurrencyToValues}\n          value={selectCurrencyToValue}\n          onChange={onChangeSelectCurrencyTo}\n        />\n      </div>\n    </div>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}